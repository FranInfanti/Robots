@startuml

namespace Logica {
    class Juego {
        - nivelActual: Int

        <<Create>> constructor(dimensionesDelMapa: Coordenadas): Juego

        - avanzarNivel(): Void
        - jugadorEliminado(HashSet<Enemigo> enemigos): Void
        - eliminarRobots(): Void
        - agregarRobots(): Void
        - agregarExplosion(Coordenadas coordenadas): Void
        - moverEnemigos(): Void
        + moverJugador(coordenadas: Coordenadas): Void
        + teleportJugador(coordenadas: Coordenadas): Void
        + estadoJuego(): Void

    }

    class Coordenadas {
        - x: Int
        - y: Int

        <<Create>> constructor(x: Int, y: Int): Coordenadas

        + esIgual(coordenadas: Coordenadas): Boolean
        + calcularDesplazamiento(coordenadas: Coordenadas): Coordenadas
    }

    class Mapa {
        <<Create>> constructor(dimensionesDelMapa: Coordenadas): Mapa

        - coordenadaOcupada(Coordenadas coordenada, HashSet<Enemigo> enemigos, Jugador jugador): boolean
        + generarCoordenadas(aux: Collection<?>, jugador: Jugador): Coordenadas
        + getCentroMapa(): Coordenadas
    }

    namespace Personajes {
        abstract class Personaje {
            - eliminado: Boolean

            <<Create>> constructor(coordenadas: Coordenadas): Personaje

            {abstract} + mover(coordenadas: Coordenadas, aux: Collection<?>): Void
        }

        class Jugador extends Personaje {
            - teleportSeguro: Int

            <<Create>> constructor(coordenadas: Coordenadas, int teleportsIniciales): Jugador

            + mover(coordenadas: Coordenadas, aux: Collection<?>): Void
            + teleportSeguro(coordenadas: Coordenadas, teleportsIniciales: Int): Boolean
            + teleportAleatorio(coordenadas: coordenadas): Boolean
        }

        abstract class Enemigo extends Personaje {
            - desplazamiento: int
            <<Create>> constructor(coordenadas: Coordenadas, int desplazamiento): Enemigo

            + isEliminado(enemigos: HashSet<Enemigos>): Boolean
        }

        class RobotX1 extends Enemigo {
            <<Create>> constructor(coordenadas: Coordenadas): RobotX1
            + mover(coordenadas: Coordenadas, aux: Collection<?>): Void
        }

        class RobotX2 extends Enemigo {
            <<Create>> constructor(coordenadas: Coordenadas): RobotX2
            + mover(coordenadas: Coordenadas, aux: Collection<?>): Void
        }

        class Explosion extends Enemigo {
            <<Create>> constructor(coordenadas: Coordenadas): Explosion
        }
    }


    class Puntaje {
        - puntos: Int

        <<Create>> constructor(): Puntaje

        + sumarPuntos(puntos: Int): Void
    }

    Juego *-- Jugador : "jugador"
    Juego *-- Enemigo : "robots"
    Juego *-- Explosion : "explosiones"
    Juego *-- Mapa : "mapa"
    Juego *-- Puntaje : "puntos"

    Mapa o-- Coordenadas : "dimensionesDelMapa"
    Personaje o-- Coordenadas : "coordenadas"
}
@enduml